#!/usr/bin/env node

'use strict';

process.title = 'gpk';

const path = require('path');

const Package = require('../lib/package');
const Environment = require('../lib/environment');
const CLI = require('../lib/cli');

const env = new Environment();

(async () => {
  await env.ensure();
  const pkg = await Package.fromDirectory({
    dir: process.cwd(),
    walk: true,
    env: env
  });

  const params = {
    global: {
      value: false,
      valid: a => (a === true || a === false),
      fallback: false,
      aliases: ['g']
    },
    production: {
      value: false,
      valid: a => (a === true || a === false),
      fallback: false
    }
  };

  const cli = new CLI({
    init: {
      args: {min: 0, max: 0},
      params: {},
      fn: async (args, params) => {
        const npkg = await Package.fromDirectory({
          dir: process.cwd(),
          walk: false,
          env: env
        });
        return npkg.init();
      }
    },
    install:  {
      args: {min: 0, max: 1024},
      params: {
        production: params.production,
        global: params.global
      },
      aliases: ['i'],
      fn: async (args, params) => {
        return pkg.install(args, params);
      }
    },
    uninstall: {
      args: {min: 0, max: 1024},
      params: {
        production: params.production,
        global: params.global
      },
      aliases: ['un'],
      fn: async (args, params) => {
        return pkg.uninstall(args, params);
      }
    },
    rebuild: {
      args: {min: 0, max: 1024},
      params: {},
      aliases: ['build', 'rb'],
      fn: async (args, params) => {
        return pkg.rebuild();
      }
    },
    test: {
      args: {min: 0, max: 0},
      params: {},
      aliases: ['t', 'tst'],
      fn: async (args, params) => {
        return pkg.run('test');
      }
    },
    run: {
      args: {min: 1, max: 1024},
      params: {},
      fn: async (args, params) => {
        const name = args.shift();
        return pkg.run(name, args);
      }
    },
    help: {
      args: {min: 0, max: 0},
      params: {},
      aliases: ['--help'],
      fn: async (args, params) => {
        const {stdout} = process;

        const pkg = require('../package.json');
        const which = path.resolve(__dirname, '../');
        const commandNames = Object.keys(cli.cmds).sort();

        stdout.write('\n');
        stdout.write(`Usage: ${pkg.name} <command>\n\n`);
        stdout.write('where <command> is one of:\n');
        stdout.write(`    ${commandNames.join(', ')}`);
        stdout.write('\n\n');
        stdout.write(`${pkg.name}@${pkg.version} ${which}\n`);
        return 0;
      }
    }
  });

  const code = await cli.run(process.argv);
  process.exit(code);
})().catch((err) => {
  env.error(err.stack);
  process.exit(1);
});
