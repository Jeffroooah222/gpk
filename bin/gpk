#!/usr/bin/env node

'use strict';

process.title = 'gpk';

const path = require('path');

const Package = require('../lib/package');
const Environment = require('../lib/environment');
const CLI = require('../lib/cli');

const env = new Environment();

(async () => {
  await env.ensure();
  const pkg = await Package.fromDirectory(process.cwd(), true, env);

  const cli = new CLI({
    install:  {
      args: {min: 0, max: 1024},
      params: {
        production: {
          value: false,
          valid: a => (a === true || a === false),
          fallback: false
        },
        global: {
          value: false,
          valid: a => (a === true || a === false),
          fallback: false,
          aliases: ['g']
        }
      },
      aliases: ['i'],
      fn: async (args, params) => {
        await pkg.install();
        await pkg.rebuild();
        await pkg.linkBin();
        return 0;
      }
    },
    rebuild: {
      args: {min: 0, max: 1024},
      params: {},
      aliases: ['build', 'rb'],
      fn: async (args, params) => {
        await pkg.rebuild();
        return 0;
      }
    },
    test: {
      args: {min: 0, max: 0},
      params: {},
      aliases: ['t', 'tst'],
      fn: async (args, params) => {
        return pkg.run('test');
      }
    },
    run: {
      args: {min: 1, max: 1},
      params: {},
      fn: async (args, params) => {
        return pkg.run(args[0]);
      }
    },
    help: {
      args: {min: 0, max: 0},
      params: {},
      aliases: ['--help'],
      fn: async (args, params) => {
        const {stdout} = process;

        const pkg = require('../package.json');
        const which = path.resolve(__dirname, '../');
        const commandNames = Object.keys(cli.cmds).sort();

        stdout.write('\n');
        stdout.write(`Usage: ${pkg.name} <command>\n\n`);
        stdout.write('where <command> is one of:\n');
        stdout.write(`    ${commandNames.join(', ')}`);
        stdout.write('\n\n');
        stdout.write(`${pkg.name}@${pkg.version} ${which}\n`);
        return 0;
      }
    }
  });

  const code = await cli.run(process.argv);
  process.exit(code);
})().catch((err) => {
  env.error(err.stack);
  process.exit(1);
});
