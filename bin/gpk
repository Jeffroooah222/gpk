#!/usr/bin/env node

'use strict';

process.title = 'gpk';

const Package = require('../lib/package');
const {processArgs, printHelp} = require('../lib/cli');

// Define shared parameters.
const production = {
  value: false,
  valid: a => (a === true || a === false),
  fallback: false
};

// Define commands and supported
// arguments and parameters.
const cmds = {
  install:  {
    args: {min: 0, max: 1024},
    params: {production}
  },
  rebuild: {
    args: {min: 0, max: 1024},
    params: {}
  },
  test: {
    args: {min: 0, max: 0},
    params: {}
  },
  run: {
    args: {min: 1, max: 1},
    params: {}
  },
  help: {
    args: {min: 0, max: 0},
    params: {}
  }
};

// Define command aliases.
cmds.build = cmds.rebuild;
cmds.rb = cmds.rebuild;
cmds.i = cmds.install;
cmds.t = cmds.test;
cmds.tst = cmds.test;

const {cmd, args, params} = processArgs(process.argv, cmds);

(async () => {
  const pkg = await Package.fromDirectory(process.cwd(), true);
  let code = 0;

  switch (cmd) {
    case 'i':
    case 'install':
      await pkg.install();
      await pkg.rebuild();
      break;
    case 'rb':
    case 'build':
    case 'rebuild':
      await pkg.rebuild();
      break;
    case 't':
    case 'tst':
    case 'test':
      code = await pkg.run('test');
      break;
    case 'run':
      code = await pkg.run(args[0]);
      break;
    case 'help':
    default:
      printHelp(cmds);
  }

  process.exit(code);
})().catch((err) => {
  process.stdout.write('gpk: \x1b[31m[error]\x1b[39m ');
  process.stdout.write(err.message);
  process.stdout.write('\n');
  process.exit(1);
});
